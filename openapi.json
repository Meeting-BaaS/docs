{
  "openapi": "3.1.0",
  "info": {
    "title": "Meeting BaaS API",
    "summary": "API for recording and transcribing video meetings across Zoom, Google Meet, and Microsoft Teams. Features include bot management, calendar integration, and transcription services.",
    "description": "Meeting BaaS API",
    "termsOfService": "https://meetingbaas.com/terms-and-conditions",
    "version": "1.1"
  },
  "servers": [
    { "url": "https://api.meetingbaas.com", "description": "Production server" }
  ],
  "paths": {
    "/bots/": {
      "post": {
        "summary": "Join Meeting",
        "description": "Initiates a bot to join a meeting either immediately or at a scheduled future time. Returns a bot ID.",
        "operationId": "join",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/JoinRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JoinResponse" }
              }
            }
          }
        },
        "security": [{ "ApiKeyAuth": [] }, { "LegacyApiKeyAuth": [] }]
      }
    },
    "/bots/{uuid}": {
      "get": {
        "summary": "Get Bot",
        "description": "Retrieves available information about a specific bot instance including its current status, configuration and meeting details.",
        "operationId": "get_bot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bot" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Leave Meeting",
        "description": "Commands a bot to immediately leave its current meeting.",
        "operationId": "leave",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LeaveResponse" }
              }
            }
          }
        }
      }
    },
    "/bots/meeting_data": {
      "get": {
        "summary": "Get Meeting Data",
        "description": "Retrieves available meeting information including participants, transcript, duration, and recording status for a specific bot session.",
        "operationId": "get_meeting_data",
        "parameters": [
          {
            "in": "query",
            "name": "bot_id",
            "required": true,
            "schema": { "type": "string" },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Metadata" }
              }
            }
          }
        }
      }
    },
    "/calendars/raw": {
      "post": {
        "summary": "List Raw Calendars",
        "description": "Retrieves unprocessed calendar data directly from the provider, including all available metadata and settings.",
        "operationId": "list_raw_calendars",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListRawCalendarsParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRawCalendarsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calendars/": {
      "get": {
        "summary": "List Calendars",
        "description": "Retrieves all configured calendars for the authenticated account with their integration status and settings.",
        "operationId": "list_calendars",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Calendar" }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Calendar",
        "description": "Establishes a new calendar integration with specified provider and authentication details.",
        "operationId": "create_calendar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCalendarParams" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCalendarResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calendars/{uuid}": {
      "get": {
        "summary": "Get a Calendar",
        "description": "Retrieves detailed information about a specific calendar integration including sync status and events.",
        "operationId": "get_calendar",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Calendar" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Calendar",
        "description": "Removes a calendar integration and cleans up associated resources including scheduled recordings.",
        "operationId": "delete_calendar",
        "responses": { "200": { "description": "no content" } }
      }
    },
    "/calendar_events/{uuid}": {
      "get": {
        "summary": "Get Event",
        "description": "Retrieves comprehensive details about a specific calendar event including meeting links, participants, and recording status.",
        "operationId": "get_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        }
      }
    },
    "/calendar_events/{uuid}/bot": {
      "post": {
        "summary": "Schedule Record Event",
        "description": "Configures a bot to automatically join and record a specific calendar event at its scheduled time.",
        "operationId": "schedule_record_event",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BotParam2" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unschedule Record Event",
        "description": "Cancels a previously scheduled recording for a calendar event and releases associated bot resources.",
        "operationId": "unschedule_record_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        }
      }
    },
    "/calendar_events/": {
      "get": {
        "summary": "List Events",
        "description": "Retrieves all calendar events within the configured time range, including their recording status and bot assignments.",
        "operationId": "list_events",
        "parameters": [
          {
            "in": "query",
            "name": "calendar_id",
            "required": true,
            "schema": { "type": "string" },
            "style": "form"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "style": "form"
          },
          {
            "in": "query",
            "name": "offset",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "style": "form"
          },
          {
            "in": "query",
            "name": "updated_at_gte",
            "schema": { "type": ["string", "null"] },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Event" }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-meeting-baas-api-key",
        "description": "API key for authentication"
      },
      "LegacyApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-spoke-api-key",
        "description": "Legacy API key for authentication (deprecated)"
      }
    },
    "schemas": {
      "Account": {
        "description": "This structure represents the user's account information.",
        "type": "object",
        "required": ["created_at", "email", "id", "status"],
        "properties": {
          "company_name": { "type": ["string", "null"] },
          "created_at": { "$ref": "#/components/schemas/SystemTime" },
          "email": { "type": "string" },
          "firstname": { "type": ["string", "null"] },
          "id": { "type": "integer", "format": "int32" },
          "lastname": { "type": ["string", "null"] },
          "phone": { "type": ["string", "null"] },
          "status": { "type": "integer", "format": "int32" }
        }
      },
      "AccountInfos": {
        "description": "Structure consisting account information.",
        "type": "object",
        "required": ["account"],
        "properties": { "account": { "$ref": "#/components/schemas/Account" } }
      },
      "ApiKeyResponse": {
        "type": "object",
        "required": ["api_key"],
        "properties": { "api_key": { "type": "string" } }
      },
      "AutomaticLeaveRequest": {
        "type": "object",
        "properties": {
          "noone_joined_timeout": {
            "description": "The timeout for the bot to wait for participants to join before leaving the meeting, defaults to 10 minutes",
            "type": ["integer", "null"],
            "format": "uint32",
            "minimum": 0.0
          },
          "waiting_room_timeout": {
            "description": "The timeout for the bot to wait in the waiting room before leaving the meeting, defaults to 10 minutes",
            "type": ["integer", "null"],
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "Bot": {
        "type": "object",
        "required": ["bot", "duration", "params"],
        "properties": {
          "bot": { "$ref": "#/components/schemas/Bot2" },
          "duration": { "type": "integer", "format": "int64" },
          "params": { "$ref": "#/components/schemas/BotParam" }
        }
      },
      "Bot2": {
        "type": "object",
        "required": [
          "account_id",
          "bot_param_id",
          "created_at",
          "ended_at",
          "id",
          "meeting_url",
          "mp4_s3_path",
          "reserved",
          "uuid"
        ],
        "properties": {
          "account_id": { "type": "integer", "format": "int32" },
          "bot_param_id": { "type": "integer", "format": "int32" },
          "created_at": { "$ref": "#/components/schemas/DateTime" },
          "ended_at": { "$ref": "#/components/schemas/OptionalDateTime" },
          "errors": { "type": ["string", "null"] },
          "event_id": { "type": ["integer", "null"], "format": "int32" },
          "id": { "type": "integer", "format": "int32" },
          "meeting_url": { "type": "string" },
          "mp4_s3_path": { "type": "string" },
          "reserved": { "type": "boolean" },
          "scheduled_bot_id": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "session_id": { "type": ["string", "null"] },
          "uuid": { "type": "string", "format": "uuid" }
        }
      },
      "BotData": {
        "type": "object",
        "required": ["bot", "transcripts"],
        "properties": {
          "bot": { "$ref": "#/components/schemas/BotWithParams" },
          "transcripts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Transcript" }
          }
        }
      },
      "BotPagined": {
        "type": "object",
        "required": ["bots", "has_more"],
        "properties": {
          "bots": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Bot" }
          },
          "has_more": { "type": "boolean" }
        }
      },
      "BotParam": {
        "type": "object",
        "required": ["bot_name", "extra", "webhook_url"],
        "properties": {
          "bot_image": { "type": ["string", "null"] },
          "bot_name": { "type": "string" },
          "deduplication_key": { "type": ["string", "null"] },
          "enter_message": { "type": ["string", "null"] },
          "extra": { "$ref": "#/components/schemas/ExtraJsonSchema" },
          "noone_joined_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "recording_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/RecordingMode" },
              { "type": "null" }
            ]
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText2" },
              { "type": "null" }
            ]
          },
          "streaming_input": { "type": ["string", "null"] },
          "streaming_output": { "type": ["string", "null"] },
          "waiting_room_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "webhook_url": { "type": "string" }
        }
      },
      "BotParam2": {
        "type": "object",
        "required": ["bot_name", "extra", "webhook_url"],
        "properties": {
          "bot_image": { "type": ["string", "null"] },
          "bot_name": { "type": "string" },
          "deduplication_key": { "type": ["string", "null"] },
          "enter_message": { "type": ["string", "null"] },
          "extra": { "$ref": "#/components/schemas/ExtraJsonSchema" },
          "noone_joined_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "recording_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/RecordingMode" },
              { "type": "null" }
            ]
          },
          "speech_to_text": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ]
          },
          "streaming_input": { "type": ["string", "null"] },
          "streaming_output": { "type": ["string", "null"] },
          "waiting_room_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "webhook_url": { "type": "string" }
        }
      },
      "BotWithParams": {
        "type": "object",
        "required": [
          "account_id",
          "bot_name",
          "bot_param_id",
          "created_at",
          "ended_at",
          "extra",
          "id",
          "meeting_url",
          "mp4_s3_path",
          "reserved",
          "uuid",
          "webhook_url"
        ],
        "properties": {
          "account_id": { "type": "integer", "format": "int32" },
          "bot_image": { "type": ["string", "null"] },
          "bot_name": { "type": "string" },
          "bot_param_id": { "type": "integer", "format": "int32" },
          "created_at": { "$ref": "#/components/schemas/DateTime" },
          "deduplication_key": { "type": ["string", "null"] },
          "ended_at": { "$ref": "#/components/schemas/OptionalDateTime" },
          "enter_message": { "type": ["string", "null"] },
          "errors": { "type": ["string", "null"] },
          "event_id": { "type": ["integer", "null"], "format": "int32" },
          "extra": { "$ref": "#/components/schemas/ExtraJsonSchema" },
          "id": { "type": "integer", "format": "int32" },
          "meeting_url": { "type": "string" },
          "mp4_s3_path": { "type": "string" },
          "noone_joined_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "recording_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/RecordingMode" },
              { "type": "null" }
            ]
          },
          "reserved": { "type": "boolean" },
          "scheduled_bot_id": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "session_id": { "type": ["string", "null"] },
          "speech_to_text_api_key": { "type": ["string", "null"] },
          "speech_to_text_provider": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToTextProvider" },
              { "type": "null" }
            ]
          },
          "streaming_input": { "type": ["string", "null"] },
          "streaming_output": { "type": ["string", "null"] },
          "uuid": { "type": "string", "format": "uuid" },
          "waiting_room_timeout": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "webhook_url": { "type": "string" }
        }
      },
      "Calendar": {
        "type": "object",
        "required": ["email", "google_id", "name", "uuid"],
        "properties": {
          "email": { "type": "string" },
          "google_id": { "type": "string" },
          "name": { "type": "string" },
          "resource_id": { "type": ["string", "null"] },
          "uuid": { "type": "string", "format": "uuid" }
        }
      },
      "CalendarListEntry": {
        "type": "object",
        "required": ["email", "id", "is_primary"],
        "properties": {
          "email": { "type": "string" },
          "id": { "type": "string" },
          "is_primary": { "type": "boolean" }
        }
      },
      "Consumption": {
        "type": "object",
        "required": ["consumption"],
        "properties": {
          "consumption": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "ConsumptionQuery": {
        "type": "object",
        "required": ["end", "start"],
        "properties": {
          "end": { "type": "integer", "format": "uint32", "minimum": 0.0 },
          "start": { "type": "integer", "format": "uint32", "minimum": 0.0 }
        }
      },
      "CreateCalendarParams": {
        "type": "object",
        "required": [
          "oauth_client_id",
          "oauth_client_secret",
          "oauth_refresh_token",
          "platform"
        ],
        "properties": {
          "oauth_client_id": { "type": "string" },
          "oauth_client_secret": { "type": "string" },
          "oauth_refresh_token": { "type": "string" },
          "platform": { "$ref": "#/components/schemas/Provider" },
          "raw_calendar_id": { "type": ["string", "null"] }
        }
      },
      "CreateCalendarResponse": {
        "type": "object",
        "required": ["calendar"],
        "properties": {
          "calendar": { "$ref": "#/components/schemas/Calendar" }
        }
      },
      "DateTime": { "type": "string", "format": "date-time" },
      "EndMeetingQuery": {
        "type": "object",
        "required": ["bot_uuid"],
        "properties": { "bot_uuid": { "type": "string" } }
      },
      "EndMeetingTrampolineQuery": {
        "type": "object",
        "required": ["bot_uuid"],
        "properties": { "bot_uuid": { "type": "string" } }
      },
      "Event": {
        "type": "object",
        "required": [
          "deleted",
          "end_time",
          "google_id",
          "is_organizer",
          "is_recurring",
          "last_updated_at",
          "meeting_url",
          "name",
          "raw",
          "start_time",
          "uuid"
        ],
        "properties": {
          "bot_param": {
            "anyOf": [
              { "$ref": "#/components/schemas/BotParam" },
              { "type": "null" }
            ]
          },
          "deleted": { "type": "boolean" },
          "end_time": { "type": "string", "format": "date-time" },
          "google_id": { "type": "string" },
          "is_organizer": { "type": "boolean" },
          "is_recurring": { "type": "boolean" },
          "last_updated_at": { "type": "string", "format": "date-time" },
          "meeting_url": { "type": "string" },
          "name": { "type": "string" },
          "raw": { "$ref": "#/components/schemas/ExtraJsonSchema" },
          "recurring_event_id": { "type": ["string", "null"] },
          "start_time": { "type": "string", "format": "date-time" },
          "uuid": { "type": "string", "format": "uuid" }
        }
      },
      "ExtraJsonSchema": {
        "description": "An object that can contain any valid JSON value",
        "type": "object",
        "additionalProperties": true
      },
      "FailedRecordRequest": {
        "type": "object",
        "required": ["meeting_url"],
        "properties": {
          "event_id": { "type": ["integer", "null"], "format": "int32" },
          "meeting_url": { "type": "string" },
          "message": { "type": ["string", "null"] },
          "project_name": { "type": ["string", "null"] },
          "reserved_instance": { "type": ["boolean", "null"] }
        }
      },
      "GetAllBotsQuery": {
        "type": "object",
        "required": ["limit", "offset"],
        "properties": {
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" }
        }
      },
      "GetMeetingDataQuery": {
        "type": "object",
        "required": ["bot_id"],
        "properties": { "bot_id": { "type": "string" } }
      },
      "GetStartedAccount": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": { "type": "string" },
          "firstname": { "type": ["string", "null"] },
          "google_token_id": { "type": ["string", "null"] },
          "lastname": { "type": ["string", "null"] },
          "microsoft_token_id": { "type": ["string", "null"] }
        }
      },
      "GetWebhookUrlResponse": {
        "type": "object",
        "properties": { "webhook_url": { "type": ["string", "null"] } }
      },
      "GetstartedQuery": {
        "type": "object",
        "properties": { "redirect_url": { "type": ["string", "null"] } }
      },
      "JoinRequest": {
        "type": "object",
        "required": ["botName", "meetingUrl", "reserved"],
        "properties": {
          "automaticLeave": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomaticLeaveRequest" },
              { "type": "null" }
            ]
          },
          "botImage": { "type": ["string", "null"], "format": "uri" },
          "botName": { "type": "string" },
          "deduplicationKey": {
            "description": "We prevent multiple bots with same API key joining a meeting within 5 mins, unless overridden by deduplication_key.",
            "type": ["string", "null"]
          },
          "entryMessage": {
            "description": "There are no entry messages on Microsoft Teams as guests outside of an organization do not have access to the chat.",
            "type": ["string", "null"]
          },
          "extra": {
            "description": "A Json object that allows you to add custom data to a bot for your convenience, e.g. your end user's ID."
          },
          "meetingUrl": {
            "description": "A valid meeting URL for: Google Meet, Zoom, Microsoft Teams (except 'live' URLs from free accounts).",
            "type": "string"
          },
          "recordingMode": {
            "anyOf": [
              { "$ref": "#/components/schemas/RecordingMode" },
              { "type": "null" }
            ]
          },
          "reserved": {
            "description": "Whether or not the bot should come from the available pool of bots or be a dedicated bot. Reserved bots come in exactly 4 minutes after the request.",
            "type": "boolean"
          },
          "speechToText": {
            "description": "The default speech to text provider is Whisper Large V3, running on Runpod.",
            "anyOf": [
              { "$ref": "#/components/schemas/SpeechToText" },
              { "type": "null" }
            ]
          },
          "startTime": {
            "description": "ISO Start time for the bot to join the meeting. For security, the bot joins 4 minutes before the start time.",
            "type": ["integer", "null"],
            "format": "uint64",
            "minimum": 0.0
          },
          "streaming": {
            "description": "WebSocket streams for 16kHz audio. Input stream receives audio sent to the bot. Output stream receives audio from the bot.",
            "anyOf": [
              { "$ref": "#/components/schemas/StreamingApiParameter" },
              { "type": "null" }
            ]
          },
          "webhookUrl": {
            "description": "A webhook URL to send events to, overrides the webhook URL set in your account settings.",
            "type": ["string", "null"]
          }
        },
        "additionalProperties": false
      },
      "JoinRequestScheduled": {
        "type": "object",
        "required": ["bot_param_id", "meeting_url", "schedule_origin"],
        "properties": {
          "bot_param_id": { "type": "integer", "format": "int32" },
          "meeting_url": { "type": "string" },
          "schedule_origin": { "$ref": "#/components/schemas/ScheduleOrigin" }
        },
        "additionalProperties": false
      },
      "JoinResponse": {
        "type": "object",
        "required": ["bot_id"],
        "properties": { "bot_id": { "type": "string", "format": "uuid" } }
      },
      "JoinResponse2": {
        "type": "object",
        "required": ["bot_id"],
        "properties": { "bot_id": { "type": "string", "format": "uuid" } }
      },
      "LeaveResponse": {
        "type": "object",
        "required": ["ok"],
        "properties": { "ok": { "type": "boolean" } }
      },
      "ListRawCalendarsParams": {
        "type": "object",
        "required": [
          "oauth_client_id",
          "oauth_client_secret",
          "oauth_refresh_token",
          "platform"
        ],
        "properties": {
          "oauth_client_id": { "type": "string" },
          "oauth_client_secret": { "type": "string" },
          "oauth_refresh_token": { "type": "string" },
          "platform": { "$ref": "#/components/schemas/Provider" }
        }
      },
      "ListRawCalendarsResponse": {
        "type": "object",
        "required": ["calendars"],
        "properties": {
          "calendars": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CalendarListEntry" }
          }
        }
      },
      "LoginAccount": {
        "type": "object",
        "required": ["password", "pseudo"],
        "properties": {
          "app_signin_token": { "type": ["string", "null"] },
          "google_chrome_token_id": { "type": ["string", "null"] },
          "google_token_id": { "type": ["string", "null"] },
          "microsoft_token_id": { "type": ["string", "null"] },
          "password": { "type": "string" },
          "pseudo": { "type": "string" }
        }
      },
      "LoginQuery": {
        "type": "object",
        "properties": { "redirect_url": { "type": ["string", "null"] } }
      },
      "Metadata": {
        "type": "object",
        "required": ["bot_data", "mp4"],
        "properties": {
          "bot_data": { "$ref": "#/components/schemas/BotData" },
          "mp4": { "type": "string" }
        }
      },
      "OptionalDateTime": { "type": ["string", "null"], "format": "date-time" },
      "PostWebhookUrlRequest": {
        "type": "object",
        "required": ["webhook_url"],
        "properties": { "webhook_url": { "type": "string" } }
      },
      "Provider": {
        "description": "Fields with value `\"simple\"` parse as `Kind::Simple`. Fields with value `\"fancy\"` parse as `Kind::SoFancy`.",
        "type": "string",
        "enum": ["Google", "Microsoft"]
      },
      "QueryListEvent": {
        "type": "object",
        "required": ["calendar_id", "limit", "offset"],
        "properties": {
          "calendar_id": { "type": "string" },
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "updated_at_gte": { "type": ["string", "null"] }
        }
      },
      "ReceivedMessageQuery": {
        "type": "object",
        "required": ["session_id"],
        "properties": { "session_id": { "type": "string" } }
      },
      "RecognizerWord": {
        "type": "object",
        "required": ["end_ts", "ts", "value"],
        "properties": {
          "end_ts": { "type": "number", "format": "double" },
          "ts": { "type": "number", "format": "double" },
          "value": { "type": "string" }
        }
      },
      "RecordingMode": {
        "description": "Recording mode for the bot",
        "oneOf": [
          {
            "description": "Records the active speaker view",
            "type": "string",
            "enum": ["speaker_view"]
          },
          {
            "description": "Records the gallery view showing multiple participants",
            "type": "string",
            "enum": ["gallery_view"]
          },
          {
            "description": "Records only the audio from the meeting",
            "type": "string",
            "enum": ["audio_only"]
          }
        ]
      },
      "RetryWebhookQuery": {
        "type": "object",
        "required": ["bot_uuid"],
        "properties": { "bot_uuid": { "type": "string" } }
      },
      "ScheduleOrigin": {
        "oneOf": [
          {
            "type": "object",
            "required": ["Event"],
            "properties": {
              "Event": {
                "type": "object",
                "required": ["id"],
                "properties": { "id": { "type": "integer", "format": "int32" } }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["ScheduledBot"],
            "properties": {
              "ScheduledBot": {
                "type": "object",
                "required": ["id"],
                "properties": { "id": { "type": "integer", "format": "int32" } }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SpeechToText": {
        "anyOf": [
          { "$ref": "#/components/schemas/SpeechToTextApiParameter" },
          { "$ref": "#/components/schemas/SpeechToTextProvider" }
        ]
      },
      "SpeechToText2": {
        "type": "object",
        "required": ["provider"],
        "properties": {
          "api_key": { "type": ["string", "null"] },
          "provider": { "$ref": "#/components/schemas/SpeechToTextProvider" }
        }
      },
      "SpeechToTextApiParameter": {
        "type": "object",
        "required": ["provider"],
        "properties": {
          "api_key": { "type": ["string", "null"] },
          "provider": { "$ref": "#/components/schemas/SpeechToTextProvider" }
        }
      },
      "SpeechToTextProvider": {
        "type": "string",
        "enum": ["Gladia", "Runpod", "Default"]
      },
      "StartRecordFailedQuery": {
        "type": "object",
        "properties": { "bot_uuid": { "type": ["string", "null"] } }
      },
      "StreamingApiParameter": {
        "type": "object",
        "properties": {
          "input": { "type": ["string", "null"] },
          "output": { "type": ["string", "null"] }
        }
      },
      "SyncResponse": {
        "type": "object",
        "properties": {
          "has_updates": {
            "description": "timestamp of last updated event if some events has been updated.",
            "type": ["string", "null"],
            "format": "date-time"
          }
        }
      },
      "SystemTime": {
        "type": "object",
        "required": ["nanos_since_epoch", "secs_since_epoch"],
        "properties": {
          "nanos_since_epoch": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "secs_since_epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Transcript": {
        "type": "object",
        "required": ["bot_id", "id", "speaker", "start_time", "words"],
        "properties": {
          "bot_id": { "type": "integer", "format": "int32" },
          "end_time": { "type": ["number", "null"], "format": "double" },
          "id": { "type": "integer", "format": "int32" },
          "speaker": { "type": "string" },
          "start_time": { "type": "number", "format": "double" },
          "words": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Word" }
          }
        }
      },
      "Transcript2": {
        "type": "object",
        "required": ["bot_id", "speaker", "start_time"],
        "properties": {
          "bot_id": { "type": "integer", "format": "int32" },
          "end_time": { "type": ["number", "null"], "format": "double" },
          "lang": { "type": ["string", "null"] },
          "speaker": { "type": "string" },
          "start_time": { "type": "number", "format": "double" }
        }
      },
      "Transcript3": {
        "type": "object",
        "required": ["bot_id", "id", "speaker", "start_time"],
        "properties": {
          "bot_id": { "type": "integer", "format": "int32" },
          "end_time": { "type": ["number", "null"], "format": "double" },
          "id": { "type": "integer", "format": "int32" },
          "lang": { "type": ["string", "null"] },
          "speaker": { "type": "string" },
          "start_time": { "type": "number", "format": "double" }
        }
      },
      "Transcript4": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "bot_id": { "type": ["integer", "null"], "format": "int32" },
          "end_time": { "type": ["number", "null"], "format": "double" },
          "id": { "type": "integer", "format": "int32" },
          "lang": { "type": ["string", "null"] },
          "speaker": { "type": ["string", "null"] },
          "start_time": { "type": ["number", "null"], "format": "double" }
        }
      },
      "Version": {
        "type": "object",
        "required": ["build_date", "location"],
        "properties": {
          "build_date": { "type": "string" },
          "location": { "type": "string" }
        }
      },
      "Word": {
        "type": "object",
        "required": ["bot_id", "end_time", "id", "start_time", "text"],
        "properties": {
          "bot_id": { "type": "integer", "format": "int32" },
          "end_time": { "type": "number", "format": "double" },
          "id": { "type": "integer", "format": "int32" },
          "start_time": { "type": "number", "format": "double" },
          "text": { "type": "string" }
        }
      }
    }
  },
  "security": [{ "ApiKeyAuth": [] }, { "LegacyApiKeyAuth": [] }]
}
