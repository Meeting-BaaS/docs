#KEY#DATE# 2025-03-08
#KEY#MAX_DIFF_LINES# 100
#KEY#EXCLUDES# pnpm.lock, TypeScript build files, Rust build files

#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# 4344b10f3435b2bb11054d9be9f00fb4622b13bd
#KEY#COMMIT_DATE# 2025-03-08 12:58:48 -0800
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# log
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- README.md
- api/server.ts
- public/index.html
- vercel.json

#KEY#DIFF_RANGE# FROM: 17350f22810fc3ac1bca05036fdd77be37b463c7 TO: 4344b10f3435b2bb11054d9be9f00fb4622b13bd
=================================================================

#KEY#GIT_DIFF#

diff --git a/README.md b/README.md
index b5607de..34965fe 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1,13 @@
 # Run an MCP Server on Vercel
 
 ## Sample POST
 
 ```sh
-curl -X POST "https://mcp-on-vercel.vercel.app/message?sessionId=2009b2d0-7584-4d3e-8f0e-62d6df7211b4" \
+curl -X POST "https://mcp-on-vercel.vercel.app/message?sessionId=711b468f-bc3b-4d91-ad56-a51e815dbc63" \
   -H "Content-Type: application/json" \
   -d '{
     "name": "John Doe",
     "email": "john@example.com",
     "message": "Hello, world!"
   }'
 ```
diff --git a/api/server.ts b/api/server.ts
index 459b18c..5deb97a 100644
--- a/api/server.ts
+++ b/api/server.ts
@@ -1,201 +1,191 @@
 import getRawBody from "raw-body";
 import { Server } from "@modelcontextprotocol/sdk/server/index.js";
 import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
 import { IncomingHttpHeaders, IncomingMessage, ServerResponse } from "http";
 import { createClient } from "redis";
 import { Socket } from "net";
 import { Readable } from "stream";
 
 interface SerializedRequest {
   url: string;
   method: string;
   body: string;
   headers: IncomingHttpHeaders;
 }
 
 const redis = createClient({ url: process.env.REDIS_URL });
 const redisPromise = redis.connect();
 redis.on("error", (err) => {
   console.error("Redis error", err);
 });
 
 let servers: Server[] = [];
 
 export default async function handler(
   req: IncomingMessage,
   res: ServerResponse
 ) {
   await redisPromise;
   const url = new URL(req.url || "", "https://example.com");
   if (url.pathname === "/sse") {
     console.log("Got new SSE connection");
 
     const transport = new SSEServerTransport("/message", res);
     const sessionId = transport.sessionId;
     const server = new Server(
       {
         name: "mcp-typescript test server on vercel",
         version: "0.1.0",
       },
       {
         capabilities: {},
       }
     );
 
     servers.push(server);
 
     server.onclose = () => {
       console.log("SSE connection closed");
       servers = servers.filter((s) => s !== server);
     };
 
-    let logs: {
-      type: "log" | "error";
-      messages: string[];
-    }[] = [];
-    // This ensures that we logs in the context of the right invocation since the subscriber
-    // is not itself invoked in request context.
-    function logInContext(severity: "log" | "error", ...messages: string[]) {
-      logs.push({
-        type: severity,
-        messages,
-      });
+    let logs: string[] = [];
+    function logInContext(message: string) {
+      logs.push(message);
     }
 
     const handleMessage = async (message: string) => {
-      console.log("Received message from Redis", message);
-      logInContext("log", "Received message from Redis", message);
+      logInContext("Received message from Redis", message);
       const request = JSON.parse(message) as SerializedRequest;
 
       const req = createFakeIncomingMessage({
         method: request.method,
         url: request.url,
         headers: request.headers,
         body: request.body,
       });
       const syntheticRes = new ServerResponse(req);
       let status = 100;
       let body = "";
       syntheticRes.writeHead = (statusCode) => {
         status = statusCode;
         return syntheticRes;
       };
       syntheticRes.end = (b) => {
         body = b;
         return syntheticRes;
       };
       await transport.handlePostMessage(req, syntheticRes);
 
       if (status >= 200 && status < 300) {
-        logInContext("log", `Request ${sessionId} succeeded`);
+        logInContext(`Request ${sessionId} succeeded`);
       } else {
         logInContext(
-          "error",
           `Message for ${sessionId} failed with status ${status}: ${body}`
         );
       }
     };
 
     const interval = setInterval(() => {
       for (const log of logs) {
-        console[log.type].call(console, ...log.messages);
+        console.log(log);
       }
       logs = [];
     }, 100);
 
     await redis.subscribe(`requests:${sessionId}`, handleMessage);
     console.log(`Subscribed to requests:${sessionId}`);
 
     const timeout = new Promise((resolve) => {
       setTimeout(() => {
         resolve(undefined);
       }, 795 * 1000);
     });
 
     await server.connect(transport);
     await timeout;
     redis.unsubscribe(`requests:${sessionId}`, handleMessage);
     clearInterval(interval);
     console.log("Done");
     res.end();
   } else if (url.pathname === "/message") {
     console.log("Received message");
 
     const body = await getRawBody(req, {
       length: req.headers["content-length"],
       encoding: "utf-8",
     });
 
     const sessionId = url.searchParams.get("sessionId") || "";
     if (!sessionId) {
       res.statusCode = 400;
       res.end("No sessionId provided");
       return;
     }
 
     const serializedRequest: SerializedRequest = {
       url: req.url || "",
       method: req.method || "",
       body: body,
       headers: req.headers,
     };
 
     // Queue the request in Redis so that a subscriber can pick it up.
     // One queue per session.
     await Promise.all([
       redis.publish(`requests:${sessionId}`, JSON.stringify(serializedRequest)),
       redis.expire(`requests:${sessionId}`, 1 * 60), // 1 minute
     ]);
     console.log(`Published requests:${sessionId}`);
 
     res.statusCode = 202;
     res.end("Accepted");
   } else if (url.pathname === "/") {
     res.statusCode = 200;
     res.end("Hello, world!");
   } else {
     res.statusCode = 404;
     res.end("Not found");
   }
 }
 
 // Define the options interface
 interface FakeIncomingMessageOptions {
   method?: string;
   url?: string;
   headers?: IncomingHttpHeaders;
   body?: string | Buffer | Record<string, any> | null;
   socket?: Socket;
 }
 
 // Create a fake IncomingMessage
 function createFakeIncomingMessage(
   options: FakeIncomingMessageOptions = {}
 ): IncomingMessage {
   const {
     method = "GET",
     url = "/",
     headers = {},
     body = null,
     socket = new Socket(),
   } = options;
 
   // Create a readable stream that will be used as the base for IncomingMessage
   const readable = new Readable();
   readable._read = (): void => {}; // Required implementation
 
   // Add the body content if provided
   if (body) {
     if (typeof body === "string") {
       readable.push(body);
     } else if (Buffer.isBuffer(body)) {
       readable.push(body);
     } else {
       readable.push(JSON.stringify(body));
     }
     readable.push(null); // Signal the end of the stream
   }
 
   // Create the IncomingMessage instance
   const req = new IncomingMessage(socket);
 
diff --git a/vercel.json b/vercel.json
index c449b17..2310db9 100644
--- a/vercel.json
+++ b/vercel.json
@@ -1,8 +1,8 @@
 {
-  "rewrites": [{ "source": "/(.+)", "destination": "/api/server" }],
+  "rewrites": [{ "source": "/(.*)", "destination": "/api/server" }],
   "functions": {
     "api/server.ts": {
       "maxDuration": 800
     }
   }
 }
#KEY#END_COMMIT#
#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# a532421b19a178dc126b98cda3144f426595db72
#KEY#COMMIT_DATE# 2025-03-08 12:53:23 -0800
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# Working
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- api/server.ts

#KEY#DIFF_RANGE# FROM: 4344b10f3435b2bb11054d9be9f00fb4622b13bd TO: a532421b19a178dc126b98cda3144f426595db72
=================================================================

#KEY#GIT_DIFF#

diff --git a/api/server.ts b/api/server.ts
index 5deb97a..747e144 100644
--- a/api/server.ts
+++ b/api/server.ts
@@ -1,184 +1,184 @@
 import getRawBody from "raw-body";
 import { Server } from "@modelcontextprotocol/sdk/server/index.js";
 import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
 import { IncomingHttpHeaders, IncomingMessage, ServerResponse } from "http";
 import { createClient } from "redis";
 import { Socket } from "net";
 import { Readable } from "stream";
 
 interface SerializedRequest {
   url: string;
   method: string;
   body: string;
   headers: IncomingHttpHeaders;
 }
 
 const redis = createClient({ url: process.env.REDIS_URL });
 const redisPromise = redis.connect();
 redis.on("error", (err) => {
   console.error("Redis error", err);
 });
 
 let servers: Server[] = [];
 
 export default async function handler(
   req: IncomingMessage,
   res: ServerResponse
 ) {
   await redisPromise;
   const url = new URL(req.url || "", "https://example.com");
   if (url.pathname === "/sse") {
     console.log("Got new SSE connection");
 
     const transport = new SSEServerTransport("/message", res);
     const sessionId = transport.sessionId;
     const server = new Server(
       {
         name: "mcp-typescript test server on vercel",
         version: "0.1.0",
       },
       {
         capabilities: {},
       }
     );
 
     servers.push(server);
 
     server.onclose = () => {
       console.log("SSE connection closed");
       servers = servers.filter((s) => s !== server);
     };
 
     let logs: string[] = [];
-    function logInContext(message: string) {
-      logs.push(message);
-    }
 
     const handleMessage = async (message: string) => {
-      logInContext("Received message from Redis", message);
+      logs.push("Received message from Redis", message);
       const request = JSON.parse(message) as SerializedRequest;
 
       const req = createFakeIncomingMessage({
         method: request.method,
         url: request.url,
         headers: request.headers,
         body: request.body,
       });
       const syntheticRes = new ServerResponse(req);
       let status = 100;
       let body = "";
       syntheticRes.writeHead = (statusCode) => {
         status = statusCode;
         return syntheticRes;
       };
-      syntheticRes.end = (b) => {
-        body = b;
+      syntheticRes.end = () => {
         return syntheticRes;
       };
       await transport.handlePostMessage(req, syntheticRes);
 
       if (status >= 200 && status < 300) {
-        logInContext(`Request ${sessionId} succeeded`);
+        logs.push(`Request ${sessionId} succeeded`);
       } else {
-        logInContext(
-          `Message for ${sessionId} failed with status ${status}: ${body}`
+        logs.push(
+          `Message for ${sessionId} failed with status ${status}: ${body}\n\n${JSON.stringify(
+            req,
+            null,
+            2
+          )}`
         );
       }
     };
 
     const interval = setInterval(() => {
       for (const log of logs) {
         console.log(log);
       }
       logs = [];
     }, 100);
 
     await redis.subscribe(`requests:${sessionId}`, handleMessage);
     console.log(`Subscribed to requests:${sessionId}`);
 
     const timeout = new Promise((resolve) => {
       setTimeout(() => {
         resolve(undefined);
       }, 795 * 1000);
     });
 
     await server.connect(transport);
     await timeout;
     redis.unsubscribe(`requests:${sessionId}`, handleMessage);
     clearInterval(interval);
     console.log("Done");
     res.end();
   } else if (url.pathname === "/message") {
     console.log("Received message");
 
     const body = await getRawBody(req, {
       length: req.headers["content-length"],
       encoding: "utf-8",
     });
 
     const sessionId = url.searchParams.get("sessionId") || "";
     if (!sessionId) {
       res.statusCode = 400;
       res.end("No sessionId provided");
       return;
     }
 
     const serializedRequest: SerializedRequest = {
       url: req.url || "",
       method: req.method || "",
       body: body,
       headers: req.headers,
     };
 
     // Queue the request in Redis so that a subscriber can pick it up.
     // One queue per session.
     await Promise.all([
       redis.publish(`requests:${sessionId}`, JSON.stringify(serializedRequest)),
       redis.expire(`requests:${sessionId}`, 1 * 60), // 1 minute
     ]);
     console.log(`Published requests:${sessionId}`);
 
     res.statusCode = 202;
     res.end("Accepted");
   } else if (url.pathname === "/") {
     res.statusCode = 200;
     res.end("Hello, world!");
   } else {
     res.statusCode = 404;
     res.end("Not found");
   }
 }
 
 // Define the options interface
 interface FakeIncomingMessageOptions {
   method?: string;
   url?: string;
   headers?: IncomingHttpHeaders;
   body?: string | Buffer | Record<string, any> | null;
   socket?: Socket;
 }
 
 // Create a fake IncomingMessage
 function createFakeIncomingMessage(
   options: FakeIncomingMessageOptions = {}
 ): IncomingMessage {
   const {
     method = "GET",
     url = "/",
     headers = {},
     body = null,
     socket = new Socket(),
   } = options;
 
   // Create a readable stream that will be used as the base for IncomingMessage
   const readable = new Readable();
   readable._read = (): void => {}; // Required implementation
 
   // Add the body content if provided
   if (body) {
     if (typeof body === "string") {
       readable.push(body);
     } else if (Buffer.isBuffer(body)) {
       readable.push(body);
     } else {
       readable.push(JSON.stringify(body));
#KEY#END_COMMIT#
#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# 2e98f2b4e4ee5e1178211e8fcf08da5285f223a3
#KEY#COMMIT_DATE# 2025-03-08 11:55:23 -0800
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# Fix creation
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- README.md
- api/server.ts
- vercel.json

#KEY#DIFF_RANGE# FROM: a532421b19a178dc126b98cda3144f426595db72 TO: 2e98f2b4e4ee5e1178211e8fcf08da5285f223a3
=================================================================

#KEY#GIT_DIFF#

diff --git a/README.md b/README.md
index 34965fe..9b65928 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1 @@
 # Run an MCP Server on Vercel
-
-## Sample POST
-
-```sh
-curl -X POST "https://mcp-on-vercel.vercel.app/message?sessionId=711b468f-bc3b-4d91-ad56-a51e815dbc63" \
-  -H "Content-Type: application/json" \
-  -d '{
-    "name": "John Doe",
-    "email": "john@example.com",
-    "message": "Hello, world!"
-  }'
-```
diff --git a/api/server.ts b/api/server.ts
index 747e144..d1aee75 100644
--- a/api/server.ts
+++ b/api/server.ts
@@ -1,204 +1,172 @@
 import getRawBody from "raw-body";
 import { Server } from "@modelcontextprotocol/sdk/server/index.js";
 import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
 import { IncomingHttpHeaders, IncomingMessage, ServerResponse } from "http";
 import { createClient } from "redis";
 import { Socket } from "net";
 import { Readable } from "stream";
 
 interface SerializedRequest {
   url: string;
   method: string;
   body: string;
   headers: IncomingHttpHeaders;
 }
 
-const redis = createClient({ url: process.env.REDIS_URL });
-const redisPromise = redis.connect();
-redis.on("error", (err) => {
-  console.error("Redis error", err);
-});
+const redisPromise = createClient({ url: process.env.REDIS_URL }).connect();
 
 let servers: Server[] = [];
 
 export default async function handler(
   req: IncomingMessage,
   res: ServerResponse
 ) {
-  await redisPromise;
+  const redis = await redisPromise;
   const url = new URL(req.url || "", "https://example.com");
   if (url.pathname === "/sse") {
     console.log("Got new SSE connection");
 
     const transport = new SSEServerTransport("/message", res);
     const sessionId = transport.sessionId;
     const server = new Server(
       {
         name: "mcp-typescript test server on vercel",
         version: "0.1.0",
       },
       {
         capabilities: {},
       }
     );
 
     servers.push(server);
 
     server.onclose = () => {
       console.log("SSE connection closed");
       servers = servers.filter((s) => s !== server);
     };
 
-    let logs: string[] = [];
-
-    const handleMessage = async (message: string) => {
-      logs.push("Received message from Redis", message);
+    redis.subscribe(`requests:${sessionId}`, async (message) => {
+      console.log("Received message from Redis", message);
       const request = JSON.parse(message) as SerializedRequest;
 
       const req = createFakeIncomingMessage({
         method: request.method,
         url: request.url,
         headers: request.headers,
         body: request.body,
       });
-      const syntheticRes = new ServerResponse(req);
+      const res = new ServerResponse(req);
       let status = 100;
       let body = "";
-      syntheticRes.writeHead = (statusCode) => {
+      res.writeHead = (statusCode) => {
         status = statusCode;
-        return syntheticRes;
+        return res;
       };
-      syntheticRes.end = () => {
-        return syntheticRes;
+      res.end = () => {
+        return res;
       };
-      await transport.handlePostMessage(req, syntheticRes);
+      await transport.handlePostMessage(req, res);
 
       if (status >= 200 && status < 300) {
-        logs.push(`Request ${sessionId} succeeded`);
+        console.info(`Request ${sessionId} succeeded`);
       } else {
-        logs.push(
+        console.error(
           `Message for ${sessionId} failed with status ${status}: ${body}\n\n${JSON.stringify(
             req,
             null,
             2
           )}`
         );
       }
-    };
-
-    const interval = setInterval(() => {
-      for (const log of logs) {
-        console.log(log);
-      }
-      logs = [];
-    }, 100);
-
-    await redis.subscribe(`requests:${sessionId}`, handleMessage);
-    console.log(`Subscribed to requests:${sessionId}`);
-
-    const timeout = new Promise((resolve) => {
-      setTimeout(() => {
-        resolve(undefined);
-      }, 795 * 1000);
     });
 
     await server.connect(transport);
-    await timeout;
-    redis.unsubscribe(`requests:${sessionId}`, handleMessage);
-    clearInterval(interval);
-    console.log("Done");
-    res.end();
   } else if (url.pathname === "/message") {
     console.log("Received message");
 
     const body = await getRawBody(req, {
       length: req.headers["content-length"],
       encoding: "utf-8",
     });
 
     const sessionId = url.searchParams.get("sessionId") || "";
-    if (!sessionId) {
-      res.statusCode = 400;
-      res.end("No sessionId provided");
-      return;
-    }
 
     const serializedRequest: SerializedRequest = {
       url: req.url || "",
       method: req.method || "",
       body: body,
       headers: req.headers,
     };
 
     // Queue the request in Redis so that a subscriber can pick it up.
     // One queue per session.
-    await Promise.all([
-      redis.publish(`requests:${sessionId}`, JSON.stringify(serializedRequest)),
-      redis.expire(`requests:${sessionId}`, 1 * 60), // 1 minute
-    ]);
-    console.log(`Published requests:${sessionId}`);
+    await redis.publish(
+      `requests:${sessionId}`,
+      JSON.stringify(serializedRequest)
+    );
+    await redis.expire(`requests:${sessionId}`, 1 * 60); // 1 minute
 
     res.statusCode = 202;
     res.end("Accepted");
   } else if (url.pathname === "/") {
     res.statusCode = 200;
     res.end("Hello, world!");
   } else {
     res.statusCode = 404;
     res.end("Not found");
   }
 }
 
 // Define the options interface
 interface FakeIncomingMessageOptions {
   method?: string;
   url?: string;
   headers?: IncomingHttpHeaders;
   body?: string | Buffer | Record<string, any> | null;
   socket?: Socket;
 }
 
 // Create a fake IncomingMessage
 function createFakeIncomingMessage(
   options: FakeIncomingMessageOptions = {}
 ): IncomingMessage {
   const {
     method = "GET",
     url = "/",
     headers = {},
     body = null,
     socket = new Socket(),
   } = options;
 
   // Create a readable stream that will be used as the base for IncomingMessage
   const readable = new Readable();
   readable._read = (): void => {}; // Required implementation
 
   // Add the body content if provided
   if (body) {
     if (typeof body === "string") {
       readable.push(body);
     } else if (Buffer.isBuffer(body)) {
       readable.push(body);
     } else {
       readable.push(JSON.stringify(body));
     }
     readable.push(null); // Signal the end of the stream
   }
 
   // Create the IncomingMessage instance
   const req = new IncomingMessage(socket);
 
   // Set the properties
   req.method = method;
   req.url = url;
   req.headers = headers;
 
   // Copy over the stream methods
   req.push = readable.push.bind(readable);
   req.read = readable.read.bind(readable);
   req.on = readable.on.bind(readable);
   req.pipe = readable.pipe.bind(readable);
 
   return req;
 }
diff --git a/vercel.json b/vercel.json
index 2310db9..c55330e 100644
--- a/vercel.json
+++ b/vercel.json
@@ -1,8 +1,3 @@
 {
-  "rewrites": [{ "source": "/(.*)", "destination": "/api/server" }],
-  "functions": {
-    "api/server.ts": {
-      "maxDuration": 800
-    }
-  }
+  "rewrites": [{ "source": "/(.*)", "destination": "/api/server" }]
 }
#KEY#END_COMMIT#
#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# a479754fdec63b9eb07af3bbf1590ae584f5a460
#KEY#COMMIT_DATE# 2025-03-08 11:53:27 -0800
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# initial
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- api/server.ts

#KEY#DIFF_RANGE# FROM: 2e98f2b4e4ee5e1178211e8fcf08da5285f223a3 TO: a479754fdec63b9eb07af3bbf1590ae584f5a460
=================================================================

#KEY#GIT_DIFF#

diff --git a/api/server.ts b/api/server.ts
index d1aee75..cc1a36c 100644
--- a/api/server.ts
+++ b/api/server.ts
@@ -1,124 +1,123 @@
 import getRawBody from "raw-body";
 import { Server } from "@modelcontextprotocol/sdk/server/index.js";
 import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
 import { IncomingHttpHeaders, IncomingMessage, ServerResponse } from "http";
 import { createClient } from "redis";
 import { Socket } from "net";
 import { Readable } from "stream";
 
 interface SerializedRequest {
   url: string;
   method: string;
   body: string;
   headers: IncomingHttpHeaders;
 }
 
-const redisPromise = createClient({ url: process.env.REDIS_URL }).connect();
+const redis = await createClient({ url: process.env.REDIS_URL }).connect();
 
 let servers: Server[] = [];
 
 export default async function handler(
   req: IncomingMessage,
   res: ServerResponse
 ) {
-  const redis = await redisPromise;
   const url = new URL(req.url || "", "https://example.com");
   if (url.pathname === "/sse") {
     console.log("Got new SSE connection");
 
     const transport = new SSEServerTransport("/message", res);
     const sessionId = transport.sessionId;
     const server = new Server(
       {
         name: "mcp-typescript test server on vercel",
         version: "0.1.0",
       },
       {
         capabilities: {},
       }
     );
 
     servers.push(server);
 
     server.onclose = () => {
       console.log("SSE connection closed");
       servers = servers.filter((s) => s !== server);
     };
 
     redis.subscribe(`requests:${sessionId}`, async (message) => {
       console.log("Received message from Redis", message);
       const request = JSON.parse(message) as SerializedRequest;
 
       const req = createFakeIncomingMessage({
         method: request.method,
         url: request.url,
         headers: request.headers,
         body: request.body,
       });
       const res = new ServerResponse(req);
       let status = 100;
       let body = "";
       res.writeHead = (statusCode) => {
         status = statusCode;
         return res;
       };
       res.end = () => {
         return res;
       };
       await transport.handlePostMessage(req, res);
 
       if (status >= 200 && status < 300) {
         console.info(`Request ${sessionId} succeeded`);
       } else {
         console.error(
           `Message for ${sessionId} failed with status ${status}: ${body}\n\n${JSON.stringify(
             req,
             null,
             2
           )}`
         );
       }
     });
 
     await server.connect(transport);
   } else if (url.pathname === "/message") {
     console.log("Received message");
 
     const body = await getRawBody(req, {
       length: req.headers["content-length"],
       encoding: "utf-8",
     });
 
     const sessionId = url.searchParams.get("sessionId") || "";
 
     const serializedRequest: SerializedRequest = {
       url: req.url || "",
       method: req.method || "",
       body: body,
       headers: req.headers,
     };
 
     // Queue the request in Redis so that a subscriber can pick it up.
     // One queue per session.
     await redis.publish(
       `requests:${sessionId}`,
       JSON.stringify(serializedRequest)
     );
     await redis.expire(`requests:${sessionId}`, 1 * 60); // 1 minute
 
     res.statusCode = 202;
     res.end("Accepted");
   } else if (url.pathname === "/") {
     res.statusCode = 200;
     res.end("Hello, world!");
   } else {
     res.statusCode = 404;
     res.end("Not found");
   }
 }
 
 // Define the options interface
 interface FakeIncomingMessageOptions {
   method?: string;
   url?: string;
   headers?: IncomingHttpHeaders;
#KEY#END_COMMIT#
