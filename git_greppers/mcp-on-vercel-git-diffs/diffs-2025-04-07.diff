#KEY#DATE# 2025-04-07
#KEY#MAX_DIFF_LINES# 100
#KEY#EXCLUDES# pnpm.lock, TypeScript build files, Rust build files

#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# f144ba73d5f577958a86ce5dc76f898fb255c8a0
#KEY#COMMIT_DATE# 2025-04-07 13:26:41 -0700
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# Create LICENSE
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- lib/mcp-api-handler.ts
- package.json
- pnpm-lock.yaml
- scripts/test-streamable-http-client.mjs

#KEY#DIFF_RANGE# FROM: 2dd5c40809a73cbb5d848f302db1276d5cc9b549 TO: f144ba73d5f577958a86ce5dc76f898fb255c8a0
=================================================================

#KEY#GIT_DIFF#

diff --git a/lib/mcp-api-handler.ts b/lib/mcp-api-handler.ts
index 1fa6759..1319841 100644
--- a/lib/mcp-api-handler.ts
+++ b/lib/mcp-api-handler.ts
@@ -1,201 +1,151 @@
 import getRawBody from "raw-body";
 import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
 import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
-import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
 import { IncomingHttpHeaders, IncomingMessage, ServerResponse } from "http";
 import { createClient } from "redis";
 import { Socket } from "net";
 import { Readable } from "stream";
 import { ServerOptions } from "@modelcontextprotocol/sdk/server/index.js";
 import vercelJson from "../vercel.json";
 
 interface SerializedRequest {
   requestId: string;
   url: string;
   method: string;
   body: string;
   headers: IncomingHttpHeaders;
 }
 
 export function initializeMcpApiHandler(
   initializeServer: (server: McpServer) => void,
   serverOptions: ServerOptions = {}
 ) {
   const maxDuration =
     vercelJson?.functions?.["api/server.ts"]?.maxDuration || 800;
   const redisUrl = process.env.REDIS_URL || process.env.KV_URL;
   if (!redisUrl) {
     throw new Error("REDIS_URL environment variable is not set");
   }
   const redis = createClient({
     url: redisUrl,
   });
   const redisPublisher = createClient({
     url: redisUrl,
   });
   redis.on("error", (err) => {
     console.error("Redis error", err);
   });
   redisPublisher.on("error", (err) => {
     console.error("Redis error", err);
   });
   const redisPromise = Promise.all([redis.connect(), redisPublisher.connect()]);
 
   let servers: McpServer[] = [];
 
-  let statelessServer: McpServer;
-  const statelessTransport = new StreamableHTTPServerTransport({
-    sessionIdGenerator: undefined,
-  });
-
   return async function mcpApiHandler(
     req: IncomingMessage,
     res: ServerResponse
   ) {
     await redisPromise;
     const url = new URL(req.url || "", "https://example.com");
-    if (url.pathname === "/mcp") {
-      if (req.method === "GET") {
-        console.log("Received GET MCP request");
-        res.writeHead(405).end(
-          JSON.stringify({
-            jsonrpc: "2.0",
-            error: {
-              code: -32000,
-              message: "Method not allowed.",
-            },
-            id: null,
-          })
-        );
-        return;
-      }
-      if (req.method === "DELETE") {
-        console.log("Received DELETE MCP request");
-        res.writeHead(405).end(
-          JSON.stringify({
-            jsonrpc: "2.0",
-            error: {
-              code: -32000,
-              message: "Method not allowed.",
-            },
-            id: null,
-          })
-        );
-        return;
-      }
-      console.log("Got new MCP connection", req.url, req.method);
-
-      if (!statelessServer) {
-        statelessServer = new McpServer(
-          {
-            name: "mcp-typescript server on vercel",
-            version: "0.1.0",
-          },
-          serverOptions
-        );
-
-        initializeServer(statelessServer);
-        await statelessServer.connect(statelessTransport);
-      }
-      await statelessTransport.handleRequest(req, res);
-    } else if (url.pathname === "/sse") {
+    if (url.pathname === "/sse") {
       console.log("Got new SSE connection");
 
       const transport = new SSEServerTransport("/message", res);
       const sessionId = transport.sessionId;
       const server = new McpServer(
         {
           name: "mcp-typescript server on vercel",
           version: "0.1.0",
         },
         serverOptions
       );
       initializeServer(server);
 
       servers.push(server);
 
       server.server.onclose = () => {
         console.log("SSE connection closed");
         servers = servers.filter((s) => s !== server);
       };
 
       let logs: {
         type: "log" | "error";
         messages: string[];
       }[] = [];
       // This ensures that we logs in the context of the right invocation since the subscriber
       // is not itself invoked in request context.
       function logInContext(severity: "log" | "error", ...messages: string[]) {
         logs.push({
           type: severity,
           messages,
         });
       }
 
       // Handles messages originally received via /message
       const handleMessage = async (message: string) => {
         console.log("Received message from Redis", message);
         logInContext("log", "Received message from Redis", message);
         const request = JSON.parse(message) as SerializedRequest;
 
         // Make in IncomingMessage object because that is what the SDK expects.
         const req = createFakeIncomingMessage({
           method: request.method,
           url: request.url,
           headers: request.headers,
           body: request.body,
         });
         const syntheticRes = new ServerResponse(req);
         let status = 100;
         let body = "";
         syntheticRes.writeHead = (statusCode: number) => {
           status = statusCode;
           return syntheticRes;
         };
         syntheticRes.end = (b: unknown) => {
           body = b as string;
           return syntheticRes;
         };
         await transport.handlePostMessage(req, syntheticRes);
 
         await redisPublisher.publish(
           `responses:${sessionId}:${request.requestId}`,
           JSON.stringify({
             status,
             body,
           })
         );
 
         if (status >= 200 && status < 300) {
           logInContext(
             "log",
             `Request ${sessionId}:${request.requestId} succeeded: ${body}`
           );
         } else {
           logInContext(
             "error",
             `Message for ${sessionId}:${request.requestId} failed with status ${status}: ${body}`
           );
         }
       };
 
       const interval = setInterval(() => {
         for (const log of logs) {
           console[log.type].call(console, ...log.messages);
         }
         logs = [];
       }, 100);
 
       await redis.subscribe(`requests:${sessionId}`, handleMessage);
       console.log(`Subscribed to requests:${sessionId}`);
 
       let timeout: NodeJS.Timeout;
       let resolveTimeout: (value: unknown) => void;
       const waitPromise = new Promise((resolve) => {
         resolveTimeout = resolve;
         timeout = setTimeout(() => {
           resolve("max duration reached");
         }, (maxDuration - 5) * 1000);
       });
 
       async function cleanup() {
diff --git a/package.json b/package.json
index 4d6d926..9b7d72d 100644
--- a/package.json
+++ b/package.json
@@ -1,23 +1,23 @@
 {
   "name": "mcp-on-vercel",
   "version": "1.0.0",
   "description": "",
   "main": "index.js",
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
   "keywords": [],
   "author": "",
   "license": "ISC",
   "packageManager": "pnpm@8.15.7+sha512.c85cd21b6da10332156b1ca2aa79c0a61ee7ad2eb0453b88ab299289e9e8ca93e6091232b25c07cbf61f6df77128d9c849e5c9ac6e44854dbd211c49f3a67adc",
   "dependencies": {
-    "@modelcontextprotocol/sdk": "^1.10.2",
+    "@modelcontextprotocol/sdk": "^1.6.1",
     "content-type": "^1.0.5",
     "raw-body": "^3.0.0",
     "redis": "^4.7.0",
     "zod": "^3.24.2"
   },
   "devDependencies": {
     "@types/node": "^22.13.10"
   }
 }
#KEY#END_COMMIT#
#KEY#START_COMMIT#
=================================================================
#KEY#COMMIT_HASH# 51e16c30846fdd81236219afc94971006a027dd7
#KEY#COMMIT_DATE# 2025-04-07 10:50:28 -0700
#KEY#COMMIT_AUTHOR# Malte Ubl
#KEY#COMMIT_MESSAGE# Update README.md
#KEY#RELATED_PR_MR# None found

#KEY#CHANGED_FILES#
- LICENSE

#KEY#DIFF_RANGE# FROM: f144ba73d5f577958a86ce5dc76f898fb255c8a0 TO: 51e16c30846fdd81236219afc94971006a027dd7
=================================================================

#KEY#GIT_DIFF#

#KEY#END_COMMIT#
