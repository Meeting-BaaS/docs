name: Update OpenAPI Specification

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-openapi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need full history for branch creation

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install jq for JSON processing
        run: sudo apt-get install -y jq

      - name: Fetch and format OpenAPI Spec
        id: fetch-spec
        run: |
          # Create a temp directory
          mkdir -p tmp

          # Fetch the latest OpenAPI spec with error handling
          if ! curl -s -f https://api.meetingbaas.com/openapi.json > tmp/raw-openapi.json; then
            echo "Error: Failed to download OpenAPI specification"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Format the downloaded spec consistently
          cat tmp/raw-openapi.json | jq -S . > tmp/openapi.json

          # Check if openapi.json exists in repo
          if [ -f "openapi.json" ]; then
            # Format the existing file consistently for comparison
            cat openapi.json | jq -S . > tmp/existing-openapi.json
            
            # Compare the formatted files (jq -S sorts the keys for consistent comparison)
            if cmp -s "tmp/existing-openapi.json" "tmp/openapi.json"; then
              echo "No changes detected in the OpenAPI spec"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected in the OpenAPI spec"
              echo "has_changes=true" >> $GITHUB_OUTPUT
              
              # Save the nicely formatted version for commit
              cat tmp/raw-openapi.json | jq . > tmp/formatted-openapi.json
              
              # Generate a checksum of the content for PR comparison
              CHECKSUM=$(cat tmp/openapi.json | sha256sum | cut -d' ' -f1)
              echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
            fi
          else
            echo "OpenAPI spec file doesn't exist yet, will create it"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Format nicely for the first commit
            cat tmp/raw-openapi.json | jq . > tmp/formatted-openapi.json
            
            # Generate a checksum of the content for PR comparison
            CHECKSUM=$(cat tmp/openapi.json | sha256sum | cut -d' ' -f1)
            echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PRs
        if: steps.fetch-spec.outputs.has_changes == 'true'
        id: check-prs
        run: |
          # Create a comment with the checksum to identify PRs with the same content
          CHECKSUM_COMMENT="OpenAPI-Checksum: ${{ steps.fetch-spec.outputs.checksum }}"

          # Get list of open PRs
          OPEN_PRS=$(gh pr list --json number,title,body --state open)

          # Check if any existing PR has the same checksum in its body
          EXISTING_PR=$(echo "$OPEN_PRS" | jq -r --arg checksum "$CHECKSUM_COMMENT" '.[] | select(.body | contains($checksum)) | .number')

          if [ -n "$EXISTING_PR" ]; then
            echo "Found existing PR #$EXISTING_PR with the same OpenAPI changes"
            echo "create_pr=false" >> $GITHUB_OUTPUT
            echo "existing_pr=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found with these changes, will create a new one"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch and PR if needed
        if: steps.fetch-spec.outputs.has_changes == 'true' && steps.check-prs.outputs.create_pr == 'true'
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Create new branch with timestamp
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          BRANCH_NAME="update-openapi-$TIMESTAMP"
          git checkout -b $BRANCH_NAME

          # Copy the formatted OpenAPI spec
          if [ -f "tmp/formatted-openapi.json" ]; then
            cp tmp/formatted-openapi.json openapi.json
          else
            cp tmp/openapi.json openapi.json
          fi

          # Commit the change
          git add openapi.json
          git commit -m "Update OpenAPI spec - $(date +'%Y-%m-%d %H:%M:%S') [Checksum: ${{ steps.fetch-spec.outputs.checksum }}]"

          # Push the branch
          git push origin $BRANCH_NAME

          # Create PR using GitHub CLI with proper YAML formatting and checksum for future identification
          gh pr create \
            --title "Update OpenAPI Spec - $(date +'%Y-%m-%d')" \
            --body $'This PR updates the OpenAPI specification from the API.\n\nAutomatically generated by GitHub Actions at '"$(date +'%Y-%m-%d %H:%M:%S')"$'\n\nThe workflow will automatically:\n1. Fetch the latest OpenAPI spec\n2. Install dependencies\n3. Run build:pre and build commands\n\nOpenAPI-Checksum: '"${{ steps.fetch-spec.outputs.checksum }}" \
            --base "${{ github.event.repository.default_branch }}" \
            --head "$BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on existing PR
        if: steps.fetch-spec.outputs.has_changes == 'true' && steps.check-prs.outputs.create_pr == 'false'
        run: |
          gh pr comment ${{ steps.check-prs.outputs.existing_pr }} --body "Workflow ran again on $(date +'%Y-%m-%d %H:%M:%S') and detected the same changes to the OpenAPI spec. No new PR needed."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build project with updated spec
        if: steps.fetch-spec.outputs.has_changes == 'true' && steps.check-prs.outputs.create_pr == 'true'
        run: |
          # Clean and rebuild
          rm -rf ./node_modules
          pnpm install
          # Use the correct build command from package.json
          pnpm with-env tsx server/db/migrate
          pnpm with-env next build
        env:
          # Add any required environment variables here
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # Add other environment variables as needed

      - name: Upload artifacts
        if: steps.fetch-spec.outputs.has_changes == 'true' && steps.check-prs.outputs.create_pr == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next
            out
            dist
